/*  Binary Serach ორობითი ძებნა მუშაობის დრო : Log(n)
რეკურსიული ორიბითი ძებნის ალგორითმი მუშაობს ზრდადობით დალაგებულ მონაცემებში  */ 
#include <bits/stdc++.h> 
using namespace std;

//ფუნქცია ორობითი ძებნისთვის
int binarySearch(int arr[]/*მასივი*/, int l/*მარცხენა ინდექსი*/, int r/*მარჯვენა ინდექსი*/, int val/*საძებნი მნიშვნელობა*/) 
{ 
    //თუ მარჯვენა ინდექსი მეტია მარცხენაზე 
    if (r >= l) { 
        //შუა ინდექსი
        int mid = l + (r - l) / 2; 
  
        // თუ ელემენტი დაემთხვა შუა ინდექსზე მყოფ ელემეტს
        // მაშინ სწორედ ეს ელემეტია (ელემენტს მივაგენით)
        if (arr[mid] == val) 
            return mid; 
  
        // თუ ელემენტი პატარაა ვიდრე შუა ინდექსზე მყოფი ელემენტი 
        // მაშინ იგი შესაძლოა იყოს მარცხენა ქვემასივში
        if (arr[mid] > val) 
            return binarySearch(arr, l, mid - 1, val); 
  
        // თუ ელემენტი დიდია ვიდრე შუა ინდექსზე მყოფი ელემენტი 
        // მაშინ იგი შესაძლოა იყოს მარჯვენა ქვემასივში
        return binarySearch(arr, mid + 1, r, val); 
    } 
  
    //ელემენტი არარსებობს მასივში
    return -1; 
} 
  
int main(void) 
{ 
    int arr[] = { 2, 3, 4, 10, 40 }; 
    int n = sizeof(arr) / sizeof(arr[0]); 
    int x = 10; 
    int result = binarySearch(arr, 0, n - 1, x); 
    (result == -1) ? printf("ელემენტი არარსებობს მასივში") 
                   : printf("ალამენტი არის ინდექსზე : - %d", result); 
    return 0; 
} 
